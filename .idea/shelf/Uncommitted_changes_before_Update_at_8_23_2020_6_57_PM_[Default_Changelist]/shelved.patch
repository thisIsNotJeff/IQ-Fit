Index: src/comp1110/ass2/FitGame.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package comp1110.ass2;\r\n\r\nimport java.util.HashSet;\r\nimport java.util.Set;\r\n\r\n/**\r\n * This class provides the text interface for the IQ Fit Game\r\n * <p>\r\n * The game is based directly on Smart Games' IQ-Fit game\r\n * (https://www.smartgames.eu/uk/one-player-games/iq-fit)\r\n */\r\npublic class FitGame {\r\n\r\n    /**\r\n     * Determine whether a piece placement is well-formed according to the\r\n     * following criteria:\r\n     * - it consists of exactly four characters\r\n     * - the first character is a valid piece descriptor character (b, B, g, G, ... y, Y)\r\n     * - the second character is in the range 0 .. 9 (column)\r\n     * - the third character is in the range 0 .. 4 (row)\r\n     * - the fourth character is in valid orientation N, S, E, W\r\n     *\r\n     * @param piecePlacement A string describing a piece placement\r\n     * @return True if the piece placement is well-formed\r\n     */\r\n    static boolean isPiecePlacementWellFormed(String piecePlacement) {\r\n\r\n        if(piecePlacement.length()!=4){return false;}\r\n\r\n        // test if the first character is valid descriptor character.\r\n        switch (String.valueOf(piecePlacement.charAt(0)).toUpperCase()){\r\n            case \"B\": case \"G\": case \"I\": case \"L\": case \"N\": case \"O\":case \"P\": case \"R\": case \"S\": case \"Y\":\r\n                break; default: return false;\r\n        }\r\n\r\n        // test if the second character is between 0 to 9.\r\n        String secondCharacter = String.valueOf(piecePlacement.charAt(1));\r\n        switch (secondCharacter){case \"0\": case \"1\": case \"2\": case \"3\": case \"4\": case \"5\":case \"6\": case \"7\": case \"8\": case \"9\":\r\n                break; default: return false;\r\n        }\r\n\r\n        // test if the third character is between 0 to 4.\r\n        String thirdCharacter = String.valueOf(piecePlacement.charAt(2));\r\n        switch (thirdCharacter){case \"0\": case \"1\": case \"2\": case \"3\": case \"4\":\r\n            break; default: return false;\r\n        }\r\n\r\n        // test if the fourth character in valid orientation N, S, E, W\r\n        switch(String.valueOf(piecePlacement.charAt(3)).toUpperCase()){\r\n            case \"N\": case \"E\": case \"S\": case \"W\":\r\n                break; default: return false;\r\n        }\r\n\r\n\r\n        return true; // FIXME Task 2: determine whether a piece placement is well-formed\r\n    }\r\n\r\n    /**\r\n     * Determine whether a placement string is well-formed:\r\n     * - it consists of exactly N four-character piece placements (where N = 1 .. 10);\r\n     * - each piece placement is well-formed\r\n     * - no shape appears more than once in the placement\r\n     * - the pieces are ordered correctly within the string\r\n     *\r\n     * @param placement A string describing a placement of one or more pieces\r\n     * @return True if the placement is well-formed\r\n     */\r\n    public static boolean isPlacementWellFormed(String placement) {\r\n        return false; // FIXME Task 3: determine whether a placement is well-formed\r\n    }\r\n\r\n    /**\r\n     * Determine whether a placement string is valid.\r\n     *\r\n     * To be valid, the placement string must be:\r\n     * - well-formed, and\r\n     * - each piece placement must be a valid placement according to the\r\n     *   rules of the game:\r\n     *   - pieces must be entirely on the board\r\n     *   - pieces must not overlap each other\r\n     *\r\n     * @param placement A placement string\r\n     * @return True if the placement sequence is valid\r\n     */\r\n    public static boolean isPlacementValid(String placement) {\r\n        return false; // FIXME Task 5: determine whether a placement string is valid\r\n    }\r\n\r\n    /**\r\n     * Given a string describing a placement of pieces, and a location\r\n     * that must be covered by the next move, return a set of all\r\n     * possible next viable piece placements which cover the location.\r\n     *\r\n     * For a piece placement to be viable it must:\r\n     *  - be a well formed piece placement\r\n     *  - be a piece that is not already placed\r\n     *  - not overlap a piece that is already placed\r\n     *  - cover the location\r\n     *\r\n     * @param placement A starting placement string\r\n     * @param col      The location's column.\r\n     * @param row      The location's row.\r\n     * @return A set of all viable piece placements, or null if there are none.\r\n     */\r\n    static Set<String> getViablePiecePlacements(String placement, int col, int row) {\r\n        return null; // FIXME Task 6: determine the set of all viable piece placements given existing placements\r\n    }\r\n\r\n    /**\r\n     * Return the solution to a particular challenge.\r\n     **\r\n     * @param challenge A challenge string.\r\n     * @return A placement string describing the encoding of the solution to\r\n     * the challenge.\r\n     */\r\n    public static String getSolution(String challenge) {\r\n        return null;  // FIXME Task 9: determine the solution to the game, given a particular challenge\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/comp1110/ass2/FitGame.java	(revision 9432c32f3a2e36f82fa6239e93dd33cfe12f4e15)
+++ src/comp1110/ass2/FitGame.java	(date 1597740291985)
@@ -25,6 +25,7 @@
      */
     static boolean isPiecePlacementWellFormed(String piecePlacement) {
 
+        // check if the String has four characters.
         if(piecePlacement.length()!=4){return false;}
 
         // test if the first character is valid descriptor character.
